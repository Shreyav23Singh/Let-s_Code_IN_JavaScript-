we use the async keyword with a function to represent that the function is an asynchronous function .
The async function returns a promise .

==> Syntax <==
async function function_name(para1 , para2 , ......,paran){
//Statements
}


* * example 1 * *
async function func_name(){
    console.log('Async function ');
    return Promise.resolve(1);
}
func_name();

Output
Async function 

/ / Use of then() / / 
* * Example 2 * * 
async function func_name(){
    console.log('Async function ');
    return Promise.resolve(1);
}
func_name().then(function(result){
    console.log(result)
});

Output
Async function 
1

# # # # # Await Keyword # # # # #
Await keyword is used inside the async function to wait for the asynchronous operation .
Syntax
let result = await promise ;

* * Example 3 * *
// a promise
let p= new Promise(function(resolve , reject){
    setTimeout(function(){
        resolve('Promise resolved')},4000)
});
//async function
async function asyncFunc(){
    //wait until the promise resolves
    let result = await p;
    console.log(result);
    console.log('hello');
}
asyncFunc();

# # Output # # 
Promise resolved
hello

Explanation - In the avove program , a promise object is created and it gets resolved after 4000 milliseconds .Here the async function is written using  ' asyncfunc() '
function is written using the async function . 
The await keyword waits for the promise to be complete (i.e, resolve or reject ) . Here , hello is displayed only after promise value is available to the result variable .
If await is not used here than hello will print before the ' Promise resolved ' .

# #  # Why async function used ? # # #
The async function allows the asynchronous method to be executed in a seemingly synchronous way . Though the operation is asynchronous , it seems that the operation is 
executed in synchronous manner .

* * * * ** Error Handling ** * * * * 
While using the async function, you write the code in a synchronous manner. And you can also use the catch() method to catch the error. For example,

// * * * ERROR HANDLING * * *
let p= new Promise(function(resolve , reject){
    setTimeout(function(){
        resolve('Promise Resolved')} , 4000);
})
async function async_func(){
    try{
        let result = await p ;
        console.log(result);
    }
    catch(error){
        console.log(error);
    }
}
async_func();

