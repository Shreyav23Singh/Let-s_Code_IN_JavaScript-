In javaScript , you can also pass a function as an argument to a function. This function that is passed as an argument inside of another function is called a 
callback function.

Question 1 ==>
setTimeout(function() {
    console.log("Hey , Kiara ");
} , 5000 );

function x(y){ //Here x is a function and y ia an argument
console.log("x");
y();
    
}
x(function y(){
    console.log("y");
});

//Javascript will won't wait for setTimeout() function , it will move . If will see a function definition of x than it will try to call x functions. 
It will pass a y , callback function into y. Than , it will excute x . Here , Ihave call y . So , here I have call y .
So , here y will print . Than , setTimeout function executes 


Question 2 ==>--------------------------------------------------------------------------------------------------------------------
setTimeout(() => 
console.log("timer") , 1000 )

function x(y){
    console.log("inside x")
    y();
}x(function y(){
    console.log("inside y ")
    
})

Output
inside x
inside y
timer

Question 3=> --------------------------------------------------------------------------------------------------------
setTimeout(() =>
console.log("Sharpener Course") , 1000)
setTimeout(() =>
console.log("Job") , 0)

function x(y){
    console.log("Hello ji x ")
    y();
}
x(function y(){
    console.log("hii y")
})


Output
Hello ji x 
hii y
Job
Sharpener Course

Question 4=>-------------------------------------------------------------------------------------------------------
function greet(name , callback){ //function
    console.log('Hi ' + name)
    callback();
}
//callback function
function callme(){
    console.log("I am a callback function");
}
//passing function as an argument
greet("Shreya" , callme);

Output
Hi Shreya
I am a callback function

Question 5=>-------------------------------------------------------------------------------------------------------
//Program with setTimeout()
function greet(){
    console.log("Hello world");
}
function sayName(name){
    console.log("hello " + name)
    
}
setTimeout(greet ,2000)
sayName("Piku")

Output
hello Piku
Hello world

Question 6=>-------------------------------------------------------------------------------------------------------
Example: Using a Callback Function
In the above example, the second function does not wait for the first function to be complete. However, 
if you want to wait for the result of the previous function call before the next statement is executed, you can use a callback function. For example,
//Program with setTimeout()
function greet(name , myFunction){
    console.log("Hello world");
    myFunction(name);
}
function sayName(name){
    console.log("hello " + name)
    
}
setTimeout(greet ,2000 , 'Rakesh' , sayName)

Output
Hello world
hello Rakesh

In the above program, the code is executed synchronously. The sayName() function is passed as an argument to the greet() function.

The setTimeout() method executes the greet() function only after 2 seconds. However, the sayName() function waits for the execution of the greet() function.

Question 7 => -----------------------------------------------------------------------------------------------------------------------------------------------
function createdthirdpost(callBack){
    setTimeout( () => {
        console.log("Post Three")
        if(callBack){
            callBack();
        }
    },1000);
    
}
function createfourthpost(){
    setTimeout( () => {
        console.log("Post  Four")
    },2000);
}
function createfifthpost(){
    setTimeout( () => {
        console.log("Five Post")
    },3000);
}
createdthirdpost();
createfourthpost();
createfifthpost();

Output
Post Three
Post  Four
Five Post
