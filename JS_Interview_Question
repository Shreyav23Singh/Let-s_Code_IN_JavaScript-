
1. Explain the execution context.
🅰️🔶Execution context is the context for describing the internal working of a code.
🔶In JavaScript, the environment that enables the JavaScript code to get executed is what we call JavaScript Execution Context.
🔶It is the execution context that describes which code section has access to the functions, variables, and objects used in the code.
🔶During the execution context, the specific code gets parsed line by line then variables and functions are stored in the memory.
🔶An execution context is similar to a container that stores variables, and the code gets evaluated and then executed.

2️⃣ How many types of execution contexts are there?
🅰️ There are 3️⃣ types of execution contexts are there-
🔹Global Execution Context(GEC)
🔹Functional Execution Context(FEC)
🔹Eval Execution Context(EEC)

3️⃣ Briefly describe the types of execution context.
🅰️💥Global Execution Context:
  - The global execution context represents the code that is not inside any function. It is created when your script is executed.
  - Variables and functions declared globally are part of the global context.
🧨
  var globalVar = 'I am global';
  function globalFunction() {
   console.log('Hello from global function');
  }
  globalFunction(); // Output: Hello from global function
 

💥 Function Execution Context:
  - When a function is called, a new function execution context is created.
  - The local variables and parameters of the function are stored in this context.

  // FEC
  function exampleFunction(param1, param2) {
   var localVar = 'I am local';

   console.log(globalVar); // Accessing global variable
   console.log(localVar); // Accessing local variable
   console.log(param1);  // Accessing function parameter

   // Nested function call
   function nestedFunction() {
    console.log('I am nested function');
   }

   nestedFunction();
  }

  exampleFunction('Param1 Value', 'Param2 Value');
 

3️⃣💥Eval Execution Context:
  - The `eval` function in JavaScript can be used to execute code dynamically.
  - When `eval` is used, it creates a new execution context.


  // EEC
  var evalCode = 'console.log("I am from eval")';

  eval(evalCode); // Output: I am from eval

👉1️⃣ . What is the Call Stack in JavaScript?
🅰️•The call stack is a crucial concept in JavaScript’s runtime environment, representing the mechanism by which the JavaScript engine keeps track of function calls in a program. It operates as a Last In, First Out (LIFO) data structure, meaning that the last function called is the first one to be resolved.
•A call stack is also known as an 'Execution Context Stack', 'Runtime Stack ', or 'Machine stack'.
✨✨
👉2️⃣. What is the mechanism of the call stack in JavaScript?
🅰️ The call stack is a mechanism that keeps track of the function calls in your code. It follows the Last In, First Out (LIFO) principle, meaning that the last function that gets added to the stack is the first one to be executed and removed.
Step-by-step process of how the call stack works in JavaScript:
🧨Function Invocation:
• When a script starts running, the global execution context is created, and its associated function (usually the global scope or the top-level code) is pushed onto the call stack.
• When a function is called, a new function execution context is created for that function, and it is pushed onto the call stack.
🧨Execution:
•The function at the top of the call stack is the one currently being executed. •The JavaScript engine executes its code line by line.
🧨Function Completion:
•When the function completes its execution, its execution context is popped off the call stack, and control returns to the calling function.
•If there are any values to be returned, they are passed back to the calling function.
🧨Recursive Calls:
•If a function calls itself (recursive call), a new function execution context is created for each recursive call and added to the call stack.
•The recursive calls continue until a base case is reached, and then the functions start to complete and pop off the stack.
At last, when the execution of the entire code is completed, the JS engine removes the GEC from the current stack.
✨Your Task : Do solve by yourself✨
👉3️⃣ Briefly explain the concept of call stack with the help of code.
function add(x, y) {
 return x + y;
}

function multiply(a, b) {
 return a * b;
}

function calculate() {
 const result1 = add(2, 3);
 const result2 = multiply(result1, 4);
 return result2;
}

const finalResult = calculate();
console.log(finalResult);

Ans : calculate is called and pushed onto the stack.
Inside calculate, add is called and pushed onto the stack.
add completes, pops off the stack, and returns to calculate.
Inside calculate, multiply is called and pushed onto the stack.
multiply completes, pops off the stack, and returns to calculate.
calculate completes, pops off the stack.
The final result is logged to the console.
